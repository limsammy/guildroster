version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: guildroster-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-guildroster}
      POSTGRES_USER: ${DB_USER:-guildroster}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-guildroster} -d ${DB_NAME:-guildroster}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - guildroster-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: guildroster-backend
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-guildroster}
      - DB_USER=${DB_USER:-guildroster}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - SECRET_KEY=${SECRET_KEY:-supersecret}
      - ENV=${ENV:-production}
      - WARCRAFTLOGS_CLIENT_ID=${WARCRAFTLOGS_CLIENT_ID:-}
      - WARCRAFTLOGS_CLIENT_SECRET=${WARCRAFTLOGS_CLIENT_SECRET:-}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173,http://127.0.0.1:3000}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      - CORS_ALLOW_METHODS=${CORS_ALLOW_METHODS:-*}
      - CORS_ALLOW_HEADERS=${CORS_ALLOW_HEADERS:-*}
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - guildroster-network
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        while ! pg_isready -h db -p 5432 -U ${DB_USER:-guildroster}; do
          sleep 2;
        done &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI application...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: "http://159.223.132.130:8000"
    container_name: guildroster-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - VITE_API_URL=http://159.223.132.130:8000
    ports:
      - "80:3000"
    depends_on:
      - backend
    networks:
      - guildroster-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: guildroster-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - guildroster-network
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local

networks:
  guildroster-network:
    driver: bridge
