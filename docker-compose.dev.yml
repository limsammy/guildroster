version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: guildroster-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-guildroster_dev}
      POSTGRES_USER: ${DB_USER:-guildroster}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-guildroster} -d ${DB_NAME:-guildroster_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - guildroster-network-dev

  # FastAPI Backend (Development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: guildroster-backend-dev
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-guildroster_dev}
      - DB_USER=${DB_USER:-guildroster}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - SECRET_KEY=${SECRET_KEY:-supersecret}
      - ENV=dev
      - WARCRAFTLOGS_CLIENT_ID=${WARCRAFTLOGS_CLIENT_ID:-}
      - WARCRAFTLOGS_CLIENT_SECRET=${WARCRAFTLOGS_CLIENT_SECRET:-}
    volumes:
      - ./app:/app/app
      - ./alembic.ini:/app/alembic.ini
      - ./migrations:/app/migrations
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./requirements.txt:/app/requirements.txt
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - guildroster-network-dev
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        while ! pg_isready -h db -p 5432 -U ${DB_USER:-guildroster}; do
          sleep 2;
        done &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI application in development mode...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # React Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: guildroster-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - guildroster-network-dev
    command: npm run dev

volumes:
  postgres_data_dev:
    driver: local

networks:
  guildroster-network-dev:
    driver: bridge 